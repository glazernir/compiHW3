%{
    #include <stdio.h>
    #include "hw3_output.hpp"
    #include "SymbolTable.h"
    #include "Semantic.h"

    extern int yylex();
    extern int yylineno;
    int yyerror(const char*);
    extern Symbol_table_stack symbolTableStack;
%}

    %nonassoc ID
    %nonassoc NUM
    %nonassoc B
    %nonassoc STRING
    %nonassoc TRUE
    %nonassoc FALSE
    %nonassoc INT
    %nonassoc BOOL
    %nonassoc BYTE
    %nonassoc SC
    %nonassoc BREAK
    %nonassoc CONTINUE
    %nonassoc RETURN
    %nonassoc IF
    %nonassoc WHILE
    %right ASSIGN
    %left OR
    %left AND
    %left RELOPEQUAL
    %left RELOPUNEQUAL
    %left PLUSMINUS
    %left MULDIV
	%right NOT
    %left LPAREN RPAREN LBRACE RBRACE
    %right ELSE

%%
Program: Statements {$$ = new Prog_Obj($1->name);}
Statements: Statement {$$ = new States_Obj($1->name,dynamic_cast<State_Obj*>($1));}
            | Statements Statement {$$ = new States_Obj($1->name,dynamic_cast<States_Obj*>($1),dynamic_cast<State_Obj*>($2));}


Statement: LBRACE {symbolTableStack.make_table(false);} Statements {symbolTableStack.pop_table();} RBRACE {}

           | Type ID SC {$$ = new State_Obj($1->name,dynamic_cast<Type_Obj*>($1),$2);
                         SemanticAction_DefaultInitialize($2);}

           | Type ID ASSIGN Exp SC {$$ = new State_Obj($1->name,dynamic_cast<Type_Obj*>($1),$2,dynamic_cast<Exp_Obj*>($4));
                                    SemanticAction_Store($2,dynamic_cast<Exp_Obj*>($4))}

           | ID ASSIGN Exp SC  {$$ = new State_Obj($1->name,$1,dynamic_cast<Exp_Obj*>($3));
                                SemanticAction_Store($1,dynamic_cast<Exp_Obj*>($3))}

           | Call SC  {$$ = new State_Obj($1->name,dynamic_cast<Call_Obj*>($1));}

           | RETURN SC  {$$ = new State_Obj($1->name,$1);
                         SemanticAction_Return();}

           | IF LPAREN EVAL RPAREN Statement {$$ = new State_Obj($1->name,dynamic_cast<Exp_Obj*>($3));
                                              symbolTableStack.pop_table();
                                              goto_False_Label(dynamic_cast<Exp_Obj*>($3));}


           | IF LPAREN EVAL RPAREN Statement ELSE {symbolTableStack.pop_table(); createAndJumpTo(); goto_False_Label(dynamic_cast<Exp_Obj*>($3))} NS Statement {$$ = new State_Obj($1->name,dynamic_cast<Exp_Obj*>($3));
                                                                                                                                                                symbolTableStack.pop_table();
                                                                                                                                                                goto_True_Label(dynamic_cast<Exp_Obj*>($8))}

           | WHILE LPAREN VerifyBool RPAREN {symbolTableStack.make_table(true); SemanticAction_While(dynamic_cast<Exp_Obj*>($3))} Statement {$$ = new State_Obj($1->name,dynamic_cast<Exp_Obj*>($3));
                                                                                                                                             symbolTableStack.pop_table();}

           | BREAK SC {$$ = new State_Obj($1->name,$1);
                       SemanticRule_Break()}

           | CONTINUE SC  {$$ = new State_Obj($1->name,$1);
                           SemanticRule_Continue()}


Call: ID LPAREN Exp RPAREN {$$ = new Call_Obj($1->name,$1,$3);
                            SemanticAction_Call($$,$1,$3);}

Type: INT {$$ = new Type_Obj($1->name,"int");}
      | BYTE {$$ = new Type_Obj($1->name,"byte");}
      | BOOL {$$ = new Type_Obj($1->name,"bool");}

Exp: LPAREN Exp RPAREN {$$ = new Exp_Obj($1->name,dynamic_cast<Exp_Obj*>($2));}
     | Exp PLUSMINUS Exp {$$ = new Exp_Obj($1->name,$1,$3,"int");
                          SemanticAction_Binop($$,dynamic_cast<Exp_Obj*>($1),$2,dynamic_cast<Exp_Obj*>($3));}

     | Exp MULDIV Exp {$$ = new Exp_Obj($1->name,$1,$3,"int");
                       SemanticAction_Binop($$,dynamic_cast<Exp_Obj*>($1),$2,dynamic_cast<Exp_Obj*>($3));}

     | ID {$$ = new Exp_Obj($1->name,true,$1);
           SemanticAction_Load($$, $1)}

     | Call {$$ = new Exp_Obj($1->name,false,$1);}

     | NUM  {$$ = new Exp_Obj($1->name,$1,"int");
             SemanticAction_Variable($$,$1,"int")}

     | NUM B {$$ = new Exp_Obj($1->name,$1,"byte");
              SemanticAction_Variable($$,$1,"byte")}

     | STRING {$$ = new Exp_Obj($1->name,$1,"string");
               SemanticAction_Variable($$,$1,"string")}

     | TRUE {$$ = new Exp_Obj($1->name,$1,"True");
             SemanticAction_Variable($$,$1,"True")}

     | FALSE {$$ = new Exp_Obj($1->name,$1,"False");
              SemanticAction_Variable($$,$1,"False")}

     | NOT Exp {$$ = new Exp_Obj($1->name,$2,$2,$1->name,"bool");
                SemanticAction_Not($$,dynamic_cast<Exp_Obj*>($2));}

     | Exp AND {SemanticActoin_And(dynamic_cast<Exp_Obj*>($1),dynamic_cast<Exp_Obj*>($1),dynamic_cast<Exp_Obj*>($1),"Left")} Exp {$$ = new Exp_Obj($1->name,$1,$3,$2->name,"bool");
                                                                                                                                  SemanticActoin_And($$,dynamic_cast<Exp_Obj*>($1),dynamic_cast<Exp_Obj*>($4),"Right")}

     | Exp OR {SemanticAction_Or(dynamic_cast<Exp_Obj*>($1),dynamic_cast<Exp_Obj*>($1),dynamic_cast<Exp_Obj*>($1),"Left")} Exp {$$ = new Exp_Obj($1->name,$1,$3,$2->name,"bool");
                                                                                                                                SemanticActoin_Or($$,dynamic_cast<Exp_Obj*>($1),dynamic_cast<Exp_Obj*>($4),"Right")}

     | Exp RELOPEQUAL Exp {$$ = new Exp_Obj($1->name,$1,$3,$2->name,"relop");
                           SemanticAction_Relop($$,dynamic_cast<Exp_Obj*>($1),$2,dynamic_cast<Exp_Obj*>($3));}

     | Exp RELOPUNEQUAL Exp {$$ = new Exp_Obj($1->name,$1,$3,$2->name,"relop");
                             SemanticAction_Relop($$,dynamic_cast<Exp_Obj*>($1),$2,dynamic_cast<Exp_Obj*>($3))}

     | LPAREN Type RPAREN Exp {$$ = new Exp_Obj($1->name,$2,$4);
                               SemanticAction_Paren($$,dynamic_cast<Exp_Obj*>($3))}


EVAL: Exp {symbolTableStack.make_table(false);
           VerifyBool($1);
           goto_True_Label(dynamic_cast<Exp_Obj*>($1));}

NS: {symbolTableStack.make_table(false);}

VerifyBool: Exp {VerifyBool($1);}

%%

Symbol_table_stack symbolTableStack = Symbol_table_stack();

int yyerror(const char *){
	output::errorSyn(yylineno);
	exit(0);
}

int main(){
     SemanticAction_StartProgaram();
     int parseResult =  yyparse();
     symbolTableStack.pop_table();
     SemanticAction_EndProgram();

     return parseResult;
}
